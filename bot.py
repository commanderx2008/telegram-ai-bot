import os
import logging
import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv("bot.env")
API_TOKEN = os.getenv("API_TOKEN")
DEEPINFRA_API_KEY = os.getenv("DEEPINFRA_API_KEY")

if not API_TOKEN:
    raise ValueError("API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env")
if not DEEPINFRA_API_KEY:
    raise ValueError("DEEPINFRA_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "–°—Ç–∞—Ä—Ç"
kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìö –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ")],
        [KeyboardButton(text="üìû –°–≤—è–∑—å —Å —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")],
        [KeyboardButton(text="üöÄ –°—Ç–∞—Ä—Ç")]
    ], resize_keyboard=True
)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ DeepInfra
async def solve_task_with_ai(task: str) -> str:
    url = "https://api.deepinfra.com/v1/openai/chat/completions"
    headers = {"Authorization": f"Bearer {DEEPINFRA_API_KEY}"}
    data = {
        "model": "meta-llama/Llama-2-7b-chat-hf",
        "messages": [{"role": "user", "content": task}],
        "temperature": 0.7
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=data, headers=headers) as response:
            if response.status == 200:
                result = await response.json()
                return result["choices"][0]["message"]["content"].strip()
            else:
                return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ä–µ—à–∏—Ç—å —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏. –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É!", reply_markup=kb)


# –ö–Ω–æ–ø–∫–∞ "–û –±–æ—Ç–µ"
@dp.message(lambda message: message.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_handler(message: types.Message):
    await message.answer("ü§ñ –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ—à–∞–µ—Ç –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò! –ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É, –∏ —è –ø–æ–º–æ–≥—É!")


# –ö–Ω–æ–ø–∫–∞ "–†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É"
@dp.message(lambda message: message.text == "üìö –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É")
async def task_request_handler(message: types.Message):
    await message.answer("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å –∑–∞–¥–∞—á—É, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –µ—ë —Ä–µ—à–∏—Ç—å!")


# –ö–Ω–æ–ø–∫–∞ "–°–≤—è–∑—å —Å —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"
@dp.message(lambda message: message.text == "üìû –°–≤—è–∑—å —Å —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
async def support_handler(message: types.Message):
    support_info = """
    üìß –î–ª—è —Å–≤—è–∑–∏ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∏—à–∏—Ç–µ –Ω–∞ email:
    xcommander67@gmail.com

    üì± –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –Ω–∞—à Telegram –∫–∞–Ω–∞–ª: @support_channel
    """
    await message.answer(support_info)


# –ö–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ä—Ç"
@dp.message(lambda message: message.text == "üöÄ –°—Ç–∞—Ä—Ç")
async def start_button_handler(message: types.Message):
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –°—Ç–∞—Ä—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã —è –ø–æ–º–æ–≥ –≤–∞–º –µ—ë —Ä–µ—à–∏—Ç—å.", reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á)
@dp.message()
async def solve_task_handler(message: types.Message):
    task = message.text.strip()
    if not task:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏!")
        return

    await message.answer("‚è≥ –î—É–º–∞—é...")
    solution = await solve_task_with_ai(task)
    await message.answer(f"‚úÖ –†–µ—à–µ–Ω–∏–µ:\n{solution}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
